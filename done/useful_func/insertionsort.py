#############################################################
# | cafe       | http://cafe.naver.com/dremdelover          |
# | Q&A        | https://open.kakao.com/o/gX0WnTCf          |
# | business   | ultrasuperrok@gmail.com                    |
#############################################################
# 삽입 정렬(Insertion Sort)의 개념:
# - 삽입 정렬은 배열의 각 원소를 이미 정렬된 부분에 적절한 위치에 삽입하는 방식으로 동작합니다.
# - 이 과정을 배열의 모든 원소에 대해 반복하여 전체 배열을 정렬합니다.

# 시간 복잡도:
# - 최선의 경우: O(n)
# - 평균 및 최악의 경우: O(n^2)

# 삽입 정렬 과정 도식화:
# e.g., arr = [5, 3, 8, 4, 2]
# |-> i=1, key=3: [5, 5, 8, 4, 2] -> [3, 5, 8, 4, 2]
# |-> i=2, key=8: (변경 없음)     -> [3, 5, 8, 4, 2]
# |-> i=3, key=4: [3, 5, 8, 8, 2] -> [3, 5, 5, 8, 2] -> [3, 4, 5, 8, 2]
# |-> i=4, key=2: [3, 4, 5, 8, 8] -> [3, 4, 5, 5, 8] -> [3, 4, 4, 5, 8] -> [3, 3, 4, 5, 8] -> [2, 3, 4, 5, 8]

def insertion_sort(arr):
    # 삽입 정렬의 기본 아이디어는 각 원소를 이미 정렬된 부분 배열에 올바른 위치에 '삽입'하는 것입니다.
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1

        # 현재 원소(key)를 정렬된 부분 배열에 적절한 위치에 삽입하는 과정
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1

        # 적절한 위치에 key 값을 삽입
        arr[j + 1] = key

    return arr

arr = [5, 3, 8, 4, 2]
sorted_arr = insertion_sort(arr)
print(sorted_arr)
