import os
from dotenv import load_dotenv
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI
import logging
from typing import Union
from typing_extensions import TypeAlias
import threading

# 환경 변수 로드
load_dotenv()
logging.basicConfig(level=logging.INFO)

# Timer 타입 정의 수정
Timer: TypeAlias = Union[threading.Timer, None]

class AlgorithmConverterCrew:
    def __init__(self):
        self.llm = ChatOpenAI(
            model="gpt-4-turbo-preview",
            temperature=0.7,
            streaming=True
        )
        self.setup_agents()

    def setup_agents(self):
        # 알고리즘 분석가 에이전트
        self.analyzer = Agent(
            role="알고리즘 추상화 전문가",
            goal="알고리즘의 입출력 구조와 제약조건을 명확하게 추상화",
            backstory="""당신은 복잡한 알고리즘을 추상화하는 전문가입니다.
            구체적인 구현에서 핵심적인 입력과 출력 구조를 추출하고,
            문제의 제약조건과 경계조건을 명확하게 정의하는 것이 특기입니다.""",
            verbose=True,
            llm=self.llm
        )

        # 의사코드 작성 에이전트
        self.pseudocoder = Agent(
            role="알고리즘 설명 전문가",
            goal="핵심 자료구조와 알고리즘 로직을 고수준으로 추상화",
            backstory="""당신은 알고리즘의 핵심 아이디어를 추상화하는 전문가입니다.
            구체적인 구현 대신, 사용되는 핵심 자료구조와 알고리즘의 주요 단계를
            고수준에서 설계하고 표현하는 것이 특기입니다.
            항상 구현 세부사항을 배제하고 알고리즘의 본질을 드러내는 데 집중합니다.""",
            verbose=True,
            llm=self.llm
        )

    def convert_algorithm(self, source_file: str) -> str:
        """알고리즘 문제 파일을 변환"""
        
        # 각 태스크를 개별적으로 실행
        # 1. 분석 태스크
        analysis_crew = Crew(
            agents=[self.analyzer],
            tasks=[Task(
                description=f"""
                다음 알고리즘 �현에서 입력과 출력의 추상적 구조를 추출하세요:
                {source_file}
                
                다음 형식으로 작성하되, 구체적인 구현 세부사항은 제외하고
                추상적인 형식로만 명시하세요:
                
                Input:
                - 변수명: 타입 (제약조건)
                - ...
                
                Output:
                - 타입 (결과값의 의미)
                """,
                agent=self.analyzer,
                expected_output="알고리즘의 입출력 구조 추상화"
            )],
            verbose=True
        )
        
        # 2. 의사코드 작성 태스크
        pseudocode_crew = Crew(
            agents=[self.pseudocoder],
            tasks=[Task(
                description=f"""
                다음 알고리즘 구현에서 본질 자료구조와 알고리즘 로직을 추출하여
                높은 단계로 추상화된 형태로 작성하세요:
                {source_file}
                
                다음 형식으로 작성하되, 세부사항은 제외하고
                알고리즘의 본질인 아이디어만 담아주세요:
                
                자료구조:
                - 이름: 타입 (용도)
                - ...
                
                알고리즘:
                1. 주요 단계 (알고리즘 본질 설명)
                   핵심 로직을 의사코드로
                2. ...
                """,
                agent=self.pseudocoder,
                expected_output="알고리즘의 본질 로직 추상화"
            )],
            verbose=True
        )

        # 각 Crew 실행 및 결과 수집
        try:
            print("\nRunning analysis...")
            analysis_result = analysis_crew.kickoff()
            
            print("\nRunning pseudocode generation...")
            pseudocode_result = pseudocode_crew.kickoff()
            
            # 결과 디버깅
            print("\nResults collected:")
            print(f"Analysis: {bool(analysis_result)}")
            print(f"Pseudocode: {bool(pseudocode_result)}")
            
            # 결과 조합
            return self._format_result({
                'analysis': analysis_result,
                'pseudocode': pseudocode_result
            })
            
        except Exception as e:
            logging.error(f"Error during task execution: {str(e)}", exc_info=True)
            return f"Error occurred during task execution: {str(e)}"

    def _format_result(self, results: dict) -> str:
        """결과를 템플릿 형식으로 포매팅"""
        try:
            analysis_result = str(results.get('analysis', ''))
            pseudocode_result = str(results.get('pseudocode', ''))
            
            # 결과가 비어있는지 확인
            if not any([analysis_result, pseudocode_result]):
                logging.error("No results were generated by the agents")
                return "Error: No results were generated"
            
            return f'''"""
[Input/Output & Core Concepts]
{analysis_result}

[Pseudocode]
{pseudocode_result}
"""

# 실제 구현 코드...
'''
        except Exception as e:
            logging.error(f"Error formatting results: {str(e)}", exc_info=True)
            return f"Error occurred while formatting results: {str(e)}"

def main():
    converter = AlgorithmConverterCrew()
    
    # 절대 경로 사용
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    solution_dir = os.path.join(base_dir, "solution")
    problems_dir = os.path.join(base_dir, "problems")
    
    print(f"Working with directories:")
    print(f"Solution dir: {solution_dir}")
    print(f"Problems dir: {problems_dir}")
    
    os.makedirs(problems_dir, exist_ok=True)
    
    # 리할 파일 선택
    filename = input("\nEnter the filename to process (e.g., 48.py): ")
    if not filename.endswith('.py'):
        filename += '.py'
        
    source_path = os.path.join(solution_dir, filename)
    target_path = os.path.join(problems_dir, filename)
    
    if not os.path.exists(source_path):
        print(f"Error: Source file {filename} not found")
        return
        
    print(f"\nProcessing {filename}...")
    try:
        with open(source_path, 'r', encoding='utf-8') as f:
            source_content = f.read()
            print(f"Read source file: {len(source_content)} bytes")
        
        print("Converting algorithm...")
        converted_content = converter.convert_algorithm(source_content)
        print(f"Conversion complete: {len(converted_content)} bytes")
        
        with open(target_path, 'w', encoding='utf-8') as f:
            f.write(converted_content)
        print(f"Successfully converted and saved to {target_path}")
        
    except Exception as e:
        print(f"Error converting {filename}: {str(e)}")
        logging.error(f"Error details:", exc_info=True)

if __name__ == "__main__":
    main() 